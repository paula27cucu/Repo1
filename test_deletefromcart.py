# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestDeletefromcart():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_deletefromcart(self):
        # Test name: delete_from_cart
        # Step # | name | target | value
        # 1 | open | /ro/ |
        self.driver.get("http://34.118.122.203/ro/")
        # 2 | setWindowSize | 1536x835 |
        self.driver.set_window_size(1536, 835)
        # 3 | click | css=.featured-products:nth-child(2) .js-product:nth-child(1) img |
        self.driver.find_element(By.CSS_SELECTOR,
                                 ".featured-products:nth-child(2) .js-product:nth-child(1) img").click()
        # 4 | click | css=.add-to-cart |
        self.driver.find_element(By.CSS_SELECTOR, ".add-to-cart").click()
        # 5 | click | css=.cart-content-btn > .btn-primary |
        finish_order = WebDriverWait(self.driver, 15).until(
            lambda d: d.find_element(By.CSS_SELECTOR, ".cart-content-btn > .btn-primary"))
        finish_order.click()
        # 6 | click | css=.header .hidden-sm-down |
        self.driver.find_element(By.CSS_SELECTOR, ".header .hidden-sm-down").click()
        # 7 | click | css=.remove-from-cart > .material-icons |
        self.driver.find_element(By.CSS_SELECTOR, ".remove-from-cart > .material-icons").click()
        # 8 | click | css=.cart-grid-body |
        self.driver.find_element(By.CSS_SELECTOR, ".cart-grid-body").click()
        no_product = WebDriverWait(self.driver, 15).until(lambda d: d.find_element(By.CLASS_NAME, 'no-items'))

        assert 'Nu mai sunt produse in cosul tau' == no_product.get_attribute('innerText')
